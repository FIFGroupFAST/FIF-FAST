import groovy.transform.CompileStatic

import org.joda.time.DateTime

import co.id.fifgroup.basicsetup.service.ServiceModel
import co.id.fifgroup.core.util.DateUtil
import co.id.fifgroup.payroll.constant.PaymentCycleType
import co.id.fifgroup.payroll.dto.PayrollProcessParameterDTO

@CompileStatic
class TunjanganMakan {

	Long presentDays;
	Double epmdAmount;
	Map<String, Object> additionalParam;
	Long personId;
	Date processDate;
	ServiceModel serviceModel;
	Long companyId;
	
	public Double getTunjanganMakan(){
		if(additionalParam.containsKey("isRapel") && (additionalParam.get("isRapel") instanceof Boolean && (Boolean) additionalParam.get("isRapel"))) {
        		return presentDays*epmdAmount;
        	} else {
			String paymentCycleCode = null;
			Integer processMonth = null;
			if(additionalParam.containsKey("paymentCycleCode")) {
				paymentCycleCode = (String) additionalParam.get("paymentCycleCode");
			}
			
			if(additionalParam.containsKey("processMonth")) {
				processMonth = (Integer) additionalParam.get("processMonth");
			}
			String processDateConv = DateUtil.format(DateUtil.truncate(processDate));
			String paycodeName = (String)additionalParam.get('paycode');
			String sqlTunjanganMakan = """
										SELECT
										  TFR.PERSON_ID,
										  TFR.PRESENT_DAYS,
										  TO_NUMBER(NVL(PAY_ENCRYPTION_UTIL_PKG.DECRYPT_DATA(NVL(PEPD.AMOUNT, 0)), 0)) AS AMOUNT_TUNJANGAN_MAKAN,
										  PEPD.RECCUR_EVERY,
										  PEPD.DATE_FROM,
										  PEPD.DATE_TO,
										  PEPD.LOCKED
										FROM
										  (
										    SELECT
										      SUM(TFR.PRESENT_DAYS) AS PRESENT_DAYS,
										      TRUNC((TRUNC(ADD_MONTHS(TFR.PERIOD_END, 1), 'MON') - 1)) AS PERIOD_END,
										      PPA.COMPANY_ID,
										      TFR.PERSON_ID
										    FROM
										      TMS_FINALIZE_RESULTS TFR
										      JOIN PEA_PRIMARY_ASSIGNMENTS PPA ON(PPA.PERSON_ID = TFR.PERSON_ID AND TRUNC(TFR.PERIOD_START) BETWEEN PPA.EFFECTIVE_START_DATE AND PPA.EFFECTIVE_END_DATE)
										    WHERE
										      PPA.COMPANY_ID = ${companyId}
										      AND TFR.PERSON_ID = ${personId}
										      AND TO_DATE('${processDateConv}') > TFR.PERIOD_END
										      AND TFR.IS_PROCESSED_TO_PAYROLL = 0
										    GROUP BY TRUNC((TRUNC(ADD_MONTHS(PERIOD_END, 1), 'MON') - 1)), PPA.COMPANY_ID, TFR.PERSON_ID
										  ) TFR
										  JOIN PAY_EMP_PAYROLL_HDR PEPH ON(PEPH.PERSON_ID = TFR.PERSON_ID AND PEPH.COMPANY_ID = TFR.COMPANY_ID)
										  JOIN PAY_EMP_PAYROLL_DTL PEPD ON(PEPD.EMP_PAYROLL_HDR_ID = PEPH.EMP_PAYROLL_HDR_ID AND TFR.PERIOD_END BETWEEN PEPD.DATE_FROM AND PEPD.DATE_TO)
										  JOIN PAY_PAYCODES PP ON(PP.PAYCODE_ID = PEPD.PAYCODE_ID AND PP.COMPANY_ID = TFR.COMPANY_ID AND TFR.PERIOD_END BETWEEN PP.DATE_FROM AND PP.DATE_TO)
										WHERE
										  PP.PAYCODE = '${paycodeName}'
									""";
			List<Map<String, Object>> resultTunjanganMakan = this.serviceModel.getFromQuery(sqlTunjanganMakan);
			BigDecimal totalAmount = BigDecimal.ZERO;
			for(Map<String, Object> epmd : resultTunjanganMakan) {
				
				boolean isValid = true;
				Integer recureEvery = null;
				if(epmd.get("RECCUR_EVERY") != null) {
					recureEvery = Integer.valueOf(epmd.get("RECCUR_EVERY").toString());
				}
				if(recureEvery != null) {
					if(paymentCycleCode != null && paymentCycleCode.equals(PaymentCycleType.MONTHLY.toString()) && epmd.get("DATE_FROM") != null) {
						isValid = false;
						Long result = Math.round(((double)12 / (double)recureEvery));
						for(int i = 0; i < result.intValue(); i++) {
							Calendar cal = Calendar.getInstance();
							cal.setTime((Date) epmd.get("DATE_FROM"));
							cal.add(Calendar.MONTH, recureEvery * i);
							Date nextProcessMonth = cal.getTime();
							
							DateTime dt = new DateTime(nextProcessMonth);
							if(processMonth.equals(dt.getMonthOfYear())) {
								isValid = false;
								break;
							}
						}
					}
				}
				
				if(isValid) {
					BigDecimal amount = BigDecimal.ZERO;
					boolean locked = false;
					Integer epmdLocked = Integer.valueOf(epmd.get("LOCKED").toString());
					if(epmdLocked != null && epmdLocked.equals(1)) {
						locked = true;
					}
					
					if(locked) {
						amount = new BigDecimal(epmd.get("AMOUNT_TUNJANGAN_MAKAN").toString());
					} else {
						Integer presentDays = Integer.valueOf(epmd.get("PRESENT_DAYS").toString());
						BigDecimal amountTunjanganMakan = new BigDecimal(epmd.get("AMOUNT_TUNJANGAN_MAKAN").toString());
						amount = amountTunjanganMakan.multiply(new BigDecimal(presentDays.toString()));
					}
					
					totalAmount = totalAmount.add(amount);
				}
				
			}
			
			return totalAmount.doubleValue();
		}
	}
}

TunjanganMakan subject = new TunjanganMakan();
subject.setPresentDays(TMS_PRESENT_DAYS);
subject.setEpmdAmount(PAY_EPMD_AMOUNT);
subject.setAdditionalParam(additionalParam);
subject.setCompanyId(company_id);
subject.setPersonId(person_id);
subject.setProcessDate(process_date);
subject.setServiceModel(serviceModel);
return subject.getTunjanganMakan();